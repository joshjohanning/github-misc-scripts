#!/bin/bash

# Create a GitHub App from a manifest
# Converts a temporary manifest code into GitHub App credentials
#
# Usage: ./create-github-app-from-manifest.sh <manifest-code>
# Example: ./create-github-app-from-manifest.sh a180b1a3d263c81bc6441d7b990bae27d4c10679
#
# Requires: GITHUB_TOKEN environment variable with a valid CLASSIC GitHub token
# The manifest code is generated by GitHub during the App Manifest flow.
# See: https://docs.github.com/en/apps/sharing-github-apps/registering-a-github-app-from-a-manifest

set -e

if [ $# -eq 0 ]; then
  echo "Usage: $0 <manifest-code>"
  exit 1
fi

# Check for GitHub token
if [ -z "$GITHUB_TOKEN" ]; then
  echo "Error: GITHUB_TOKEN environment variable is required"
  echo "Set it with: export GITHUB_TOKEN=your_token_here"
  exit 1
fi

# Check if it's a classic token (starts with ghp_)
if [[ ! "$GITHUB_TOKEN" =~ ^ghp_ ]]; then
  echo "Error: GITHUB_TOKEN must be a classic personal access token (starts with 'ghp_')"
  echo "Fine-grained tokens are not supported for this endpoint"
  exit 1
fi

MANIFEST_CODE="$1"

echo "Converting manifest code: $MANIFEST_CODE"

# Make the API call
RESPONSE=$(curl -s -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  "https://api.github.com/app-manifests/$MANIFEST_CODE/conversions")

# Check for errors
if echo "$RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
  echo "Error: $(echo "$RESPONSE" | jq -r '.message')"
  exit 1
fi

# Save PEM to file
APP_NAME=$(echo "$RESPONSE" | jq -r '.name // .slug' | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
PEM_FILE="${APP_NAME}.$(date +%Y-%m-%d).private-key.pem"
echo "$RESPONSE" | jq -r '.pem' > "$PEM_FILE"

# Display all response data
echo "$RESPONSE" | jq .

echo ""
echo "âœ… Private key saved to: $PEM_FILE"
