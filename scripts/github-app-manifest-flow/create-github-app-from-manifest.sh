#!/bin/bash

# Create a GitHub App from a manifest
# This script converts a temporary manifest code into GitHub App credentials
# Uses curl instead of GitHub CLI for better portability
#
# WHAT IS A MANIFEST CODE?
# The manifest code is a temporary code generated by GitHub during the App Manifest flow.
# It's NOT something you create yourself. Here's how to get one:
#
# 1. Create an HTML form that posts to GitHub's manifest endpoint with your app configuration
# 2. User clicks "Create GitHub App"
# 3. GitHub redirects back to your site with a temporary code parameter
# 4. Use that code with this script to get the actual app credentials
#
# Usage: ./create-github-app-from-manifest.sh <manifest-code>
#
# Example: ./create-github-app-from-manifest.sh a180b1a3d263c81bc6441d7b990bae27d4c10679
#
# Required: curl, jq, and GITHUB_TOKEN environment variable with a valid CLASSIC GitHub token
# Note: The manifest code expires in 1 hour and can only be used once
#
# For full manifest flow documentation:
# https://docs.github.com/en/apps/sharing-github-apps/registering-a-github-app-from-a-manifest
#
# API Reference: https://docs.github.com/en/rest/apps/apps#create-a-github-app-from-a-manifest

set -e

# Check for required dependencies
if ! command -v curl &> /dev/null; then
  echo "Error: curl is required but not installed"
  exit 1
fi

if ! command -v jq &> /dev/null; then
  echo "Error: jq is required but not installed"
  echo "Install with: brew install jq  # macOS"
  echo "            : apt-get install jq  # Ubuntu/Debian"
  echo "            : yum install jq      # CentOS/RHEL"
  exit 1
fi

# Check if required arguments are provided
if [ $# -eq 0 ]; then
  echo "Error: Manifest code is required"
  echo "Usage: $0 <manifest-code>"
  echo ""
  echo "Example: $0 a180b1a3d263c81bc6441d7b990bae27d4c10679"
  echo ""
  echo "WHAT IS A MANIFEST CODE?"
  echo "The manifest code is generated by GitHub during the App Manifest flow:"
  echo "1. Create an HTML form that posts to GitHub with your app configuration"
  echo "2. User submits the form and GitHub redirects back with a 'code' parameter"
  echo "3. Use that code with this script to get the actual app credentials"
  echo ""
  echo "For the complete manifest flow, see:"
  echo "https://docs.github.com/en/apps/sharing-github-apps/registering-a-github-app-from-a-manifest"
  exit 1
fi

# Check for GitHub token
if [ -z "$GITHUB_TOKEN" ]; then
  echo "Error: GITHUB_TOKEN environment variable is required"
  echo "Set it with: export GITHUB_TOKEN=your_token_here"
  exit 1
fi

# Check if it's a classic token (starts with ghp_)
if [[ ! "$GITHUB_TOKEN" =~ ^ghp_ ]]; then
  echo "Error: GITHUB_TOKEN must be a classic personal access token (starts with 'ghp_')"
  echo "Fine-grained tokens are not supported for this endpoint"
  exit 1
fi

MANIFEST_CODE="$1"

echo "Converting manifest code to GitHub App credentials..."
echo "Manifest code: $MANIFEST_CODE"
echo ""

# Make the API call to convert the manifest code using curl
RESPONSE=$(curl -s -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $GITHUB_TOKEN" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  "https://api.github.com/app-manifests/$MANIFEST_CODE/conversions")

# gh api example
# # Make the API call to convert the manifest code
# RESPONSE=$(gh api \
#   --method POST \
#   -H "Accept: application/vnd.github+json" \
#   -H "X-GitHub-Api-Version: 2022-11-28" \
#   "/app-manifests/$MANIFEST_CODE/conversions")

# Check if the request was successful
if ! echo "$RESPONSE" | jq -e . > /dev/null 2>&1; then
  echo "❌ Error: Failed to parse JSON response"
  echo "Response: $RESPONSE"
  exit 1
fi

# Check for API errors
if echo "$RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
  echo "❌ API Error:"
  echo "$RESPONSE" | jq -r '.message'
  if echo "$RESPONSE" | jq -e '.documentation_url' > /dev/null 2>&1; then
    echo "Documentation: $(echo "$RESPONSE" | jq -r '.documentation_url')"
  fi
  exit 1
fi

# Extract values for file naming
APP_NAME=$(echo "$RESPONSE" | jq -r '.name // .slug' | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
CURRENT_DATE=$(date +%Y-%m-%d)
PEM_FILENAME="${APP_NAME}.${CURRENT_DATE}.private-key.pem"

# Save the PEM to a file
echo "$RESPONSE" | jq -r '.pem' > "$PEM_FILENAME"

# Display the formatted response
echo "$RESPONSE" | jq '{
  id: .id,
  slug: .slug,
  name: .name,
  description: .description,
  client_id: .client_id,
  client_secret: .client_secret,
  webhook_secret: .webhook_secret,
  pem: .pem,
  owner: .owner.login,
  html_url: .html_url,
  permissions: .permissions,
  events: .events
}'

echo ""
echo "✅ GitHub App created successfully!"
echo ""
echo "Important: Save the client_secret, webhook_secret, and pem values securely."
echo "The pem field contains the full RSA private key for the app."
echo "These credentials cannot be retrieved again through the API."
echo ""
echo "� Private key automatically saved to: $PEM_FILENAME"
echo "💡 You can use this file for GitHub App authentication and JWT generation."
